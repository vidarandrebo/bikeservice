/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createEquipmentTypeResponseFromDiscriminatorValue, serializePostEquipmentTypeRequest, type EquipmentTypeResponse, type PostEquipmentTypeRequest } from '../../models/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /api/Type
 */
export interface TypeRequestBuilder extends BaseRequestBuilder<TypeRequestBuilder> {
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ArrayBuffer>}
     */
     delete(requestConfiguration?: RequestConfiguration<TypeRequestBuilderDeleteQueryParameters> | undefined) : Promise<ArrayBuffer | undefined>;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<EquipmentTypeResponse[]>}
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<EquipmentTypeResponse[] | undefined>;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ArrayBuffer>}
     */
     post(body: PostEquipmentTypeRequest, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ArrayBuffer | undefined>;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<TypeRequestBuilderDeleteQueryParameters> | undefined) : RequestInformation;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: PostEquipmentTypeRequest, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
export interface TypeRequestBuilderDeleteQueryParameters {
    id?: string;
}
/**
 * Uri template for the request builder.
 */
export const TypeRequestBuilderUriTemplate = "{+baseurl}/api/Type{?id*}";
/**
 * Metadata for all the requests in the request builder.
 */
export const TypeRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: TypeRequestBuilderUriTemplate,
        adapterMethodName: "sendPrimitive",
        responseBodyFactory:  "ArrayBuffer",
    },
    get: {
        uriTemplate: TypeRequestBuilderUriTemplate,
        responseBodyContentType: "text/plain;q=0.9",
        adapterMethodName: "sendCollection",
        responseBodyFactory:  createEquipmentTypeResponseFromDiscriminatorValue,
    },
    post: {
        uriTemplate: TypeRequestBuilderUriTemplate,
        adapterMethodName: "sendPrimitive",
        responseBodyFactory:  "ArrayBuffer",
        requestBodyContentType: "application/json",
        requestBodySerializer: serializePostEquipmentTypeRequest,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
