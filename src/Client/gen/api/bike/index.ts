/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createBikeResponseFromDiscriminatorValue, serializePostBikeRequest, serializePutBikeRequest, type BikeResponse, type PostBikeRequest, type PutBikeRequest } from '../../models/index.js';
// @ts-ignore
import { BikeItemRequestBuilderRequestsMetadata, type BikeItemRequestBuilder } from './item/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type Guid, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /api/Bike
 */
export interface BikeRequestBuilder extends BaseRequestBuilder<BikeRequestBuilder> {
    /**
     * Gets an item from the ApiSdk.api.Bike.item collection
     * @param id Unique identifier of the item
     * @returns {BikeItemRequestBuilder}
     */
     byId(id: Guid) : BikeItemRequestBuilder;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ArrayBuffer>}
     */
     delete(requestConfiguration?: RequestConfiguration<BikeRequestBuilderDeleteQueryParameters> | undefined) : Promise<ArrayBuffer | undefined>;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<BikeResponse[]>}
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<BikeResponse[] | undefined>;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ArrayBuffer>}
     */
     post(body: PostBikeRequest, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ArrayBuffer | undefined>;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ArrayBuffer>}
     */
     put(body: PutBikeRequest, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ArrayBuffer | undefined>;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<BikeRequestBuilderDeleteQueryParameters> | undefined) : RequestInformation;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: PostBikeRequest, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPutRequestInformation(body: PutBikeRequest, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
export interface BikeRequestBuilderDeleteQueryParameters {
    id?: string;
}
/**
 * Uri template for the request builder.
 */
export const BikeRequestBuilderUriTemplate = "{+baseurl}/api/Bike{?id*}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const BikeRequestBuilderNavigationMetadata: Record<Exclude<keyof BikeRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byId: {
        requestsMetadata: BikeItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["id"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const BikeRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: BikeRequestBuilderUriTemplate,
        adapterMethodName: "sendPrimitive",
        responseBodyFactory:  "ArrayBuffer",
    },
    get: {
        uriTemplate: BikeRequestBuilderUriTemplate,
        responseBodyContentType: "text/plain;q=0.9",
        adapterMethodName: "sendCollection",
        responseBodyFactory:  createBikeResponseFromDiscriminatorValue,
    },
    post: {
        uriTemplate: BikeRequestBuilderUriTemplate,
        adapterMethodName: "sendPrimitive",
        responseBodyFactory:  "ArrayBuffer",
        requestBodyContentType: "application/json",
        requestBodySerializer: serializePostBikeRequest,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
    put: {
        uriTemplate: BikeRequestBuilderUriTemplate,
        adapterMethodName: "sendPrimitive",
        responseBodyFactory:  "ArrayBuffer",
        requestBodyContentType: "application/json",
        requestBodySerializer: serializePutBikeRequest,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
