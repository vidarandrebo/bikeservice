/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { type AdditionalDataHolder, type Guid, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AccessTokenResponse extends AdditionalDataHolder, Parsable {
    /**
     * The accessToken property
     */
    accessToken?: string | null;
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The expiresIn property
     */
    expiresIn?: number | null;
    /**
     * The refreshToken property
     */
    refreshToken?: string | null;
    /**
     * The tokenType property
     */
    tokenType?: string | null;
}
export interface BikeResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The date property
     */
    date?: Date | null;
    /**
     * The id property
     */
    id?: Guid | null;
    /**
     * The manufacturer property
     */
    manufacturer?: string | null;
    /**
     * The mileage property
     */
    mileage?: number | null;
    /**
     * The model property
     */
    model?: string | null;
    /**
     * The typeId property
     */
    typeId?: Guid | null;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AccessTokenResponse}
 */
// @ts-ignore
export function createAccessTokenResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAccessTokenResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {BikeResponse}
 */
// @ts-ignore
export function createBikeResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoBikeResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {EquipmentTypeResponse}
 */
// @ts-ignore
export function createEquipmentTypeResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoEquipmentTypeResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {HttpValidationProblemDetails_errors}
 */
// @ts-ignore
export function createHttpValidationProblemDetails_errorsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoHttpValidationProblemDetails_errors;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {HttpValidationProblemDetails}
 */
// @ts-ignore
export function createHttpValidationProblemDetailsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoHttpValidationProblemDetails;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {LoginRequest}
 */
// @ts-ignore
export function createLoginRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoLoginRequest;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PartResponse}
 */
// @ts-ignore
export function createPartResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPartResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PostBikeRequest}
 */
// @ts-ignore
export function createPostBikeRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPostBikeRequest;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PostEquipmentTypeRequest}
 */
// @ts-ignore
export function createPostEquipmentTypeRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPostEquipmentTypeRequest;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PostPartRequest}
 */
// @ts-ignore
export function createPostPartRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPostPartRequest;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PutBikeRequest}
 */
// @ts-ignore
export function createPutBikeRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPutBikeRequest;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PutPartRequest}
 */
// @ts-ignore
export function createPutPartRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPutPartRequest;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RefreshRequest}
 */
// @ts-ignore
export function createRefreshRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRefreshRequest;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RegisterRequest}
 */
// @ts-ignore
export function createRegisterRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRegisterRequest;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAccessTokenResponse(accessTokenResponse: Partial<AccessTokenResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "accessToken": n => { accessTokenResponse.accessToken = n.getStringValue(); },
        "expiresIn": n => { accessTokenResponse.expiresIn = n.getNumberValue(); },
        "refreshToken": n => { accessTokenResponse.refreshToken = n.getStringValue(); },
        "tokenType": n => { accessTokenResponse.tokenType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoBikeResponse(bikeResponse: Partial<BikeResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "date": n => { bikeResponse.date = n.getDateValue(); },
        "id": n => { bikeResponse.id = n.getGuidValue(); },
        "manufacturer": n => { bikeResponse.manufacturer = n.getStringValue(); },
        "mileage": n => { bikeResponse.mileage = n.getNumberValue(); },
        "model": n => { bikeResponse.model = n.getStringValue(); },
        "typeId": n => { bikeResponse.typeId = n.getGuidValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoEquipmentTypeResponse(equipmentTypeResponse: Partial<EquipmentTypeResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "category": n => { equipmentTypeResponse.category = n.getNumberValue(); },
        "id": n => { equipmentTypeResponse.id = n.getGuidValue(); },
        "name": n => { equipmentTypeResponse.name = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoHttpValidationProblemDetails(httpValidationProblemDetails: Partial<HttpValidationProblemDetails> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "detail": n => { httpValidationProblemDetails.detail = n.getStringValue(); },
        "errors": n => { httpValidationProblemDetails.errors = n.getObjectValue<HttpValidationProblemDetails_errors>(createHttpValidationProblemDetails_errorsFromDiscriminatorValue); },
        "instance": n => { httpValidationProblemDetails.instance = n.getStringValue(); },
        "status": n => { httpValidationProblemDetails.status = n.getNumberValue(); },
        "title": n => { httpValidationProblemDetails.title = n.getStringValue(); },
        "type": n => { httpValidationProblemDetails.type = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoHttpValidationProblemDetails_errors(httpValidationProblemDetails_errors: Partial<HttpValidationProblemDetails_errors> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoLoginRequest(loginRequest: Partial<LoginRequest> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "email": n => { loginRequest.email = n.getStringValue(); },
        "password": n => { loginRequest.password = n.getStringValue(); },
        "twoFactorCode": n => { loginRequest.twoFactorCode = n.getStringValue(); },
        "twoFactorRecoveryCode": n => { loginRequest.twoFactorRecoveryCode = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPartResponse(partResponse: Partial<PartResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "bikeId": n => { partResponse.bikeId = n.getGuidValue(); },
        "id": n => { partResponse.id = n.getGuidValue(); },
        "manufacturer": n => { partResponse.manufacturer = n.getStringValue(); },
        "mileage": n => { partResponse.mileage = n.getNumberValue(); },
        "model": n => { partResponse.model = n.getStringValue(); },
        "typeId": n => { partResponse.typeId = n.getGuidValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPostBikeRequest(postBikeRequest: Partial<PostBikeRequest> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "date": n => { postBikeRequest.date = n.getDateValue(); },
        "id": n => { postBikeRequest.id = n.getStringValue(); },
        "manufacturer": n => { postBikeRequest.manufacturer = n.getStringValue(); },
        "mileage": n => { postBikeRequest.mileage = n.getNumberValue(); },
        "model": n => { postBikeRequest.model = n.getStringValue(); },
        "typeId": n => { postBikeRequest.typeId = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPostEquipmentTypeRequest(postEquipmentTypeRequest: Partial<PostEquipmentTypeRequest> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "category": n => { postEquipmentTypeRequest.category = n.getNumberValue(); },
        "name": n => { postEquipmentTypeRequest.name = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPostPartRequest(postPartRequest: Partial<PostPartRequest> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "bikeId": n => { postPartRequest.bikeId = n.getStringValue(); },
        "id": n => { postPartRequest.id = n.getStringValue(); },
        "manufacturer": n => { postPartRequest.manufacturer = n.getStringValue(); },
        "mileage": n => { postPartRequest.mileage = n.getNumberValue(); },
        "model": n => { postPartRequest.model = n.getStringValue(); },
        "typeId": n => { postPartRequest.typeId = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPutBikeRequest(putBikeRequest: Partial<PutBikeRequest> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "date": n => { putBikeRequest.date = n.getDateValue(); },
        "id": n => { putBikeRequest.id = n.getStringValue(); },
        "manufacturer": n => { putBikeRequest.manufacturer = n.getStringValue(); },
        "mileage": n => { putBikeRequest.mileage = n.getNumberValue(); },
        "model": n => { putBikeRequest.model = n.getStringValue(); },
        "typeId": n => { putBikeRequest.typeId = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPutPartRequest(putPartRequest: Partial<PutPartRequest> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "bikeId": n => { putPartRequest.bikeId = n.getStringValue(); },
        "id": n => { putPartRequest.id = n.getStringValue(); },
        "manufacturer": n => { putPartRequest.manufacturer = n.getStringValue(); },
        "mileage": n => { putPartRequest.mileage = n.getNumberValue(); },
        "model": n => { putPartRequest.model = n.getStringValue(); },
        "typeId": n => { putPartRequest.typeId = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoRefreshRequest(refreshRequest: Partial<RefreshRequest> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "refreshToken": n => { refreshRequest.refreshToken = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoRegisterRequest(registerRequest: Partial<RegisterRequest> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "email": n => { registerRequest.email = n.getStringValue(); },
        "password": n => { registerRequest.password = n.getStringValue(); },
    }
}
export interface EquipmentTypeResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The category property
     */
    category?: number | null;
    /**
     * The id property
     */
    id?: Guid | null;
    /**
     * The name property
     */
    name?: string | null;
}
export interface HttpValidationProblemDetails extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The detail property
     */
    detail?: string | null;
    /**
     * The errors property
     */
    errors?: HttpValidationProblemDetails_errors | null;
    /**
     * The instance property
     */
    instance?: string | null;
    /**
     * The status property
     */
    status?: number | null;
    /**
     * The title property
     */
    title?: string | null;
    /**
     * The type property
     */
    type?: string | null;
}
export interface HttpValidationProblemDetails_errors extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
}
export interface LoginRequest extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The email property
     */
    email?: string | null;
    /**
     * The password property
     */
    password?: string | null;
    /**
     * The twoFactorCode property
     */
    twoFactorCode?: string | null;
    /**
     * The twoFactorRecoveryCode property
     */
    twoFactorRecoveryCode?: string | null;
}
export interface PartResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The bikeId property
     */
    bikeId?: Guid | null;
    /**
     * The id property
     */
    id?: Guid | null;
    /**
     * The manufacturer property
     */
    manufacturer?: string | null;
    /**
     * The mileage property
     */
    mileage?: number | null;
    /**
     * The model property
     */
    model?: string | null;
    /**
     * The typeId property
     */
    typeId?: Guid | null;
}
export interface PostBikeRequest extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The date property
     */
    date?: Date | null;
    /**
     * The id property
     */
    id?: string | null;
    /**
     * The manufacturer property
     */
    manufacturer?: string | null;
    /**
     * The mileage property
     */
    mileage?: number | null;
    /**
     * The model property
     */
    model?: string | null;
    /**
     * The typeId property
     */
    typeId?: string | null;
}
export interface PostEquipmentTypeRequest extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The category property
     */
    category?: number | null;
    /**
     * The name property
     */
    name?: string | null;
}
export interface PostPartRequest extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The bikeId property
     */
    bikeId?: string | null;
    /**
     * The id property
     */
    id?: string | null;
    /**
     * The manufacturer property
     */
    manufacturer?: string | null;
    /**
     * The mileage property
     */
    mileage?: number | null;
    /**
     * The model property
     */
    model?: string | null;
    /**
     * The typeId property
     */
    typeId?: string | null;
}
export interface PutBikeRequest extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The date property
     */
    date?: Date | null;
    /**
     * The id property
     */
    id?: string | null;
    /**
     * The manufacturer property
     */
    manufacturer?: string | null;
    /**
     * The mileage property
     */
    mileage?: number | null;
    /**
     * The model property
     */
    model?: string | null;
    /**
     * The typeId property
     */
    typeId?: string | null;
}
export interface PutPartRequest extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The bikeId property
     */
    bikeId?: string | null;
    /**
     * The id property
     */
    id?: string | null;
    /**
     * The manufacturer property
     */
    manufacturer?: string | null;
    /**
     * The mileage property
     */
    mileage?: number | null;
    /**
     * The model property
     */
    model?: string | null;
    /**
     * The typeId property
     */
    typeId?: string | null;
}
export interface RefreshRequest extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The refreshToken property
     */
    refreshToken?: string | null;
}
export interface RegisterRequest extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The email property
     */
    email?: string | null;
    /**
     * The password property
     */
    password?: string | null;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAccessTokenResponse(writer: SerializationWriter, accessTokenResponse: Partial<AccessTokenResponse> | undefined | null = {}) : void {
    if (accessTokenResponse) {
        writer.writeStringValue("accessToken", accessTokenResponse.accessToken);
        writer.writeNumberValue("expiresIn", accessTokenResponse.expiresIn);
        writer.writeStringValue("refreshToken", accessTokenResponse.refreshToken);
        writer.writeStringValue("tokenType", accessTokenResponse.tokenType);
        writer.writeAdditionalData(accessTokenResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeBikeResponse(writer: SerializationWriter, bikeResponse: Partial<BikeResponse> | undefined | null = {}) : void {
    if (bikeResponse) {
        writer.writeDateValue("date", bikeResponse.date);
        writer.writeGuidValue("id", bikeResponse.id);
        writer.writeStringValue("manufacturer", bikeResponse.manufacturer);
        writer.writeNumberValue("mileage", bikeResponse.mileage);
        writer.writeStringValue("model", bikeResponse.model);
        writer.writeGuidValue("typeId", bikeResponse.typeId);
        writer.writeAdditionalData(bikeResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeEquipmentTypeResponse(writer: SerializationWriter, equipmentTypeResponse: Partial<EquipmentTypeResponse> | undefined | null = {}) : void {
    if (equipmentTypeResponse) {
        writer.writeNumberValue("category", equipmentTypeResponse.category);
        writer.writeGuidValue("id", equipmentTypeResponse.id);
        writer.writeStringValue("name", equipmentTypeResponse.name);
        writer.writeAdditionalData(equipmentTypeResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeHttpValidationProblemDetails(writer: SerializationWriter, httpValidationProblemDetails: Partial<HttpValidationProblemDetails> | undefined | null = {}) : void {
    if (httpValidationProblemDetails) {
        writer.writeStringValue("detail", httpValidationProblemDetails.detail);
        writer.writeObjectValue<HttpValidationProblemDetails_errors>("errors", httpValidationProblemDetails.errors, serializeHttpValidationProblemDetails_errors);
        writer.writeStringValue("instance", httpValidationProblemDetails.instance);
        writer.writeNumberValue("status", httpValidationProblemDetails.status);
        writer.writeStringValue("title", httpValidationProblemDetails.title);
        writer.writeStringValue("type", httpValidationProblemDetails.type);
        writer.writeAdditionalData(httpValidationProblemDetails.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeHttpValidationProblemDetails_errors(writer: SerializationWriter, httpValidationProblemDetails_errors: Partial<HttpValidationProblemDetails_errors> | undefined | null = {}) : void {
    if (httpValidationProblemDetails_errors) {
        writer.writeAdditionalData(httpValidationProblemDetails_errors.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeLoginRequest(writer: SerializationWriter, loginRequest: Partial<LoginRequest> | undefined | null = {}) : void {
    if (loginRequest) {
        writer.writeStringValue("email", loginRequest.email);
        writer.writeStringValue("password", loginRequest.password);
        writer.writeStringValue("twoFactorCode", loginRequest.twoFactorCode);
        writer.writeStringValue("twoFactorRecoveryCode", loginRequest.twoFactorRecoveryCode);
        writer.writeAdditionalData(loginRequest.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePartResponse(writer: SerializationWriter, partResponse: Partial<PartResponse> | undefined | null = {}) : void {
    if (partResponse) {
        writer.writeGuidValue("bikeId", partResponse.bikeId);
        writer.writeGuidValue("id", partResponse.id);
        writer.writeStringValue("manufacturer", partResponse.manufacturer);
        writer.writeNumberValue("mileage", partResponse.mileage);
        writer.writeStringValue("model", partResponse.model);
        writer.writeGuidValue("typeId", partResponse.typeId);
        writer.writeAdditionalData(partResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePostBikeRequest(writer: SerializationWriter, postBikeRequest: Partial<PostBikeRequest> | undefined | null = {}) : void {
    if (postBikeRequest) {
        writer.writeDateValue("date", postBikeRequest.date);
        writer.writeStringValue("id", postBikeRequest.id);
        writer.writeStringValue("manufacturer", postBikeRequest.manufacturer);
        writer.writeNumberValue("mileage", postBikeRequest.mileage);
        writer.writeStringValue("model", postBikeRequest.model);
        writer.writeStringValue("typeId", postBikeRequest.typeId);
        writer.writeAdditionalData(postBikeRequest.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePostEquipmentTypeRequest(writer: SerializationWriter, postEquipmentTypeRequest: Partial<PostEquipmentTypeRequest> | undefined | null = {}) : void {
    if (postEquipmentTypeRequest) {
        writer.writeNumberValue("category", postEquipmentTypeRequest.category);
        writer.writeStringValue("name", postEquipmentTypeRequest.name);
        writer.writeAdditionalData(postEquipmentTypeRequest.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePostPartRequest(writer: SerializationWriter, postPartRequest: Partial<PostPartRequest> | undefined | null = {}) : void {
    if (postPartRequest) {
        writer.writeStringValue("bikeId", postPartRequest.bikeId);
        writer.writeStringValue("id", postPartRequest.id);
        writer.writeStringValue("manufacturer", postPartRequest.manufacturer);
        writer.writeNumberValue("mileage", postPartRequest.mileage);
        writer.writeStringValue("model", postPartRequest.model);
        writer.writeStringValue("typeId", postPartRequest.typeId);
        writer.writeAdditionalData(postPartRequest.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePutBikeRequest(writer: SerializationWriter, putBikeRequest: Partial<PutBikeRequest> | undefined | null = {}) : void {
    if (putBikeRequest) {
        writer.writeDateValue("date", putBikeRequest.date);
        writer.writeStringValue("id", putBikeRequest.id);
        writer.writeStringValue("manufacturer", putBikeRequest.manufacturer);
        writer.writeNumberValue("mileage", putBikeRequest.mileage);
        writer.writeStringValue("model", putBikeRequest.model);
        writer.writeStringValue("typeId", putBikeRequest.typeId);
        writer.writeAdditionalData(putBikeRequest.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePutPartRequest(writer: SerializationWriter, putPartRequest: Partial<PutPartRequest> | undefined | null = {}) : void {
    if (putPartRequest) {
        writer.writeStringValue("bikeId", putPartRequest.bikeId);
        writer.writeStringValue("id", putPartRequest.id);
        writer.writeStringValue("manufacturer", putPartRequest.manufacturer);
        writer.writeNumberValue("mileage", putPartRequest.mileage);
        writer.writeStringValue("model", putPartRequest.model);
        writer.writeStringValue("typeId", putPartRequest.typeId);
        writer.writeAdditionalData(putPartRequest.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeRefreshRequest(writer: SerializationWriter, refreshRequest: Partial<RefreshRequest> | undefined | null = {}) : void {
    if (refreshRequest) {
        writer.writeStringValue("refreshToken", refreshRequest.refreshToken);
        writer.writeAdditionalData(refreshRequest.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeRegisterRequest(writer: SerializationWriter, registerRequest: Partial<RegisterRequest> | undefined | null = {}) : void {
    if (registerRequest) {
        writer.writeStringValue("email", registerRequest.email);
        writer.writeStringValue("password", registerRequest.password);
        writer.writeAdditionalData(registerRequest.additionalData);
    }
}
/* tslint:enable */
/* eslint-enable */
