/* tslint:disable */
/* eslint-disable */
/**
 * BikeService.Server | v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
/**
 *
 * @export
 * @interface PutBikeRequest
 */
export interface PutBikeRequest {
    /**
     *
     * @type {string}
     * @memberof PutBikeRequest
     */
    id: string;
    /**
     *
     * @type {number}
     * @memberof PutBikeRequest
     */
    mileage: number;
    /**
     *
     * @type {string}
     * @memberof PutBikeRequest
     */
    model: string;
    /**
     *
     * @type {string}
     * @memberof PutBikeRequest
     */
    manufacturer: string;
    /**
     *
     * @type {Date}
     * @memberof PutBikeRequest
     */
    date: Date;
    /**
     *
     * @type {string}
     * @memberof PutBikeRequest
     */
    typeId: string;
}

/**
 * Check if a given object implements the PutBikeRequest interface.
 */
export function instanceOfPutBikeRequest(value: object): value is PutBikeRequest {
    if (!("id" in value) || value["id"] === undefined) return false;
    if (!("mileage" in value) || value["mileage"] === undefined) return false;
    if (!("model" in value) || value["model"] === undefined) return false;
    if (!("manufacturer" in value) || value["manufacturer"] === undefined) return false;
    if (!("date" in value) || value["date"] === undefined) return false;
    if (!("typeId" in value) || value["typeId"] === undefined) return false;
    return true;
}

export function PutBikeRequestFromJSON(json: any): PutBikeRequest {
    return PutBikeRequestFromJSONTyped(json, false);
}

export function PutBikeRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): PutBikeRequest {
    if (json == null) {
        return json;
    }
    return {
        id: json["id"],
        mileage: json["mileage"],
        model: json["model"],
        manufacturer: json["manufacturer"],
        date: new Date(json["date"]),
        typeId: json["typeId"]
    };
}

export function PutBikeRequestToJSON(json: any): PutBikeRequest {
    return PutBikeRequestToJSONTyped(json, false);
}

export function PutBikeRequestToJSONTyped(value?: PutBikeRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        id: value["id"],
        mileage: value["mileage"],
        model: value["model"],
        manufacturer: value["manufacturer"],
        date: value["date"].toISOString(),
        typeId: value["typeId"]
    };
}
