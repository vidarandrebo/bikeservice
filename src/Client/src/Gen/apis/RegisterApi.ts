/* tslint:disable */
/* eslint-disable */
/**
 * BikeService.Server | v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HttpValidationProblemDetails,
  RegisterRequest,
} from '../models/index';
import {
    HttpValidationProblemDetailsFromJSON,
    HttpValidationProblemDetailsToJSON,
    RegisterRequestFromJSON,
    RegisterRequestToJSON,
} from '../models/index';

export interface ApiRegisterPostRequest {
    registerRequest: RegisterRequest;
}

/**
 * RegisterApi - interface
 * 
 * @export
 * @interface RegisterApiInterface
 */
export interface RegisterApiInterface {
    /**
     * 
     * @param {RegisterRequest} registerRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegisterApiInterface
     */
    apiRegisterPostRaw(requestParameters: ApiRegisterPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HttpValidationProblemDetails>>;

    /**
     */
    apiRegisterPost(requestParameters: ApiRegisterPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HttpValidationProblemDetails>;

}

/**
 * 
 */
export class RegisterApi extends runtime.BaseAPI implements RegisterApiInterface {

    /**
     */
    async apiRegisterPostRaw(requestParameters: ApiRegisterPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HttpValidationProblemDetails>> {
        if (requestParameters['registerRequest'] == null) {
            throw new runtime.RequiredError(
                'registerRequest',
                'Required parameter "registerRequest" was null or undefined when calling apiRegisterPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/Register`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterRequestToJSON(requestParameters['registerRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HttpValidationProblemDetailsFromJSON(jsonValue));
    }

    /**
     */
    async apiRegisterPost(requestParameters: ApiRegisterPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HttpValidationProblemDetails> {
        const response = await this.apiRegisterPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
