/* tslint:disable */
/* eslint-disable */
/**
 * BikeService.Server | v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
    AccessTokenResponse,
    HttpValidationProblemDetails,
    LoginRequest,
    RefreshRequest,
    RegisterRequest
} from "../models/index";
import {
    AccessTokenResponseFromJSON,
    AccessTokenResponseToJSON,
    HttpValidationProblemDetailsFromJSON,
    HttpValidationProblemDetailsToJSON,
    LoginRequestFromJSON,
    LoginRequestToJSON,
    RefreshRequestFromJSON,
    RefreshRequestToJSON,
    RegisterRequestFromJSON,
    RegisterRequestToJSON
} from "../models/index";

export interface ApiAuthLoginPostRequest {
    loginRequest: LoginRequest;
}

export interface ApiAuthRefreshPostRequest {
    refreshRequest: RefreshRequest;
}

export interface ApiAuthRegisterPostRequest {
    registerRequest: RegisterRequest;
}

/**
 * AuthApi - interface
 *
 * @export
 * @interface AuthApiInterface
 */
export interface AuthApiInterface {
    /**
     *
     * @param {LoginRequest} loginRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    apiAuthLoginPostRaw(
        requestParameters: ApiAuthLoginPostRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<AccessTokenResponse>>;

    /**
     */
    apiAuthLoginPost(
        requestParameters: ApiAuthLoginPostRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<AccessTokenResponse>;

    /**
     *
     * @param {RefreshRequest} refreshRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    apiAuthRefreshPostRaw(
        requestParameters: ApiAuthRefreshPostRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<AccessTokenResponse>>;

    /**
     */
    apiAuthRefreshPost(
        requestParameters: ApiAuthRefreshPostRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<AccessTokenResponse>;

    /**
     *
     * @param {RegisterRequest} registerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    apiAuthRegisterPostRaw(
        requestParameters: ApiAuthRegisterPostRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<void>>;

    /**
     */
    apiAuthRegisterPost(
        requestParameters: ApiAuthRegisterPostRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<void>;
}

/**
 *
 */
export class AuthApi extends runtime.BaseAPI implements AuthApiInterface {
    /**
     */
    async apiAuthLoginPostRaw(
        requestParameters: ApiAuthLoginPostRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<AccessTokenResponse>> {
        if (requestParameters["loginRequest"] == null) {
            throw new runtime.RequiredError(
                "loginRequest",
                'Required parameter "loginRequest" was null or undefined when calling apiAuthLoginPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        let urlPath = `/api/Auth/Login`;

        const response = await this.request(
            {
                path: urlPath,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: LoginRequestToJSON(requestParameters["loginRequest"])
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => AccessTokenResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiAuthLoginPost(
        requestParameters: ApiAuthLoginPostRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<AccessTokenResponse> {
        const response = await this.apiAuthLoginPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAuthRefreshPostRaw(
        requestParameters: ApiAuthRefreshPostRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<AccessTokenResponse>> {
        if (requestParameters["refreshRequest"] == null) {
            throw new runtime.RequiredError(
                "refreshRequest",
                'Required parameter "refreshRequest" was null or undefined when calling apiAuthRefreshPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        let urlPath = `/api/Auth/Refresh`;

        const response = await this.request(
            {
                path: urlPath,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: RefreshRequestToJSON(requestParameters["refreshRequest"])
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => AccessTokenResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiAuthRefreshPost(
        requestParameters: ApiAuthRefreshPostRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<AccessTokenResponse> {
        const response = await this.apiAuthRefreshPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAuthRegisterPostRaw(
        requestParameters: ApiAuthRegisterPostRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters["registerRequest"] == null) {
            throw new runtime.RequiredError(
                "registerRequest",
                'Required parameter "registerRequest" was null or undefined when calling apiAuthRegisterPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        let urlPath = `/api/Auth/Register`;

        const response = await this.request(
            {
                path: urlPath,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: RegisterRequestToJSON(requestParameters["registerRequest"])
            },
            initOverrides
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiAuthRegisterPost(
        requestParameters: ApiAuthRegisterPostRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<void> {
        await this.apiAuthRegisterPostRaw(requestParameters, initOverrides);
    }
}
