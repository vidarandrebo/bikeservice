/* tslint:disable */
/* eslint-disable */
/**
 * BikeService.Server | v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PartResponse,
  PostPartRequest,
  ProblemDetails,
  PutPartRequest,
} from '../models/index';
import {
    PartResponseFromJSON,
    PartResponseToJSON,
    PostPartRequestFromJSON,
    PostPartRequestToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    PutPartRequestFromJSON,
    PutPartRequestToJSON,
} from '../models/index';

export interface ApiPartDeleteRequest {
    id?: string;
}

export interface ApiPartPostRequest {
    postPartRequest: PostPartRequest;
}

export interface ApiPartPutRequest {
    putPartRequest: PutPartRequest;
}

/**
 * PartApi - interface
 * 
 * @export
 * @interface PartApiInterface
 */
export interface PartApiInterface {
    /**
     * 
     * @param {string} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartApiInterface
     */
    apiPartDeleteRaw(requestParameters: ApiPartDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    apiPartDelete(requestParameters: ApiPartDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartApiInterface
     */
    apiPartGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PartResponse>>>;

    /**
     */
    apiPartGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PartResponse>>;

    /**
     * 
     * @param {PostPartRequest} postPartRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartApiInterface
     */
    apiPartPostRaw(requestParameters: ApiPartPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PartResponse>>;

    /**
     */
    apiPartPost(requestParameters: ApiPartPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PartResponse>;

    /**
     * 
     * @param {PutPartRequest} putPartRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartApiInterface
     */
    apiPartPutRaw(requestParameters: ApiPartPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    apiPartPut(requestParameters: ApiPartPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class PartApi extends runtime.BaseAPI implements PartApiInterface {

    /**
     */
    async apiPartDeleteRaw(requestParameters: ApiPartDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/Part`;

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiPartDelete(requestParameters: ApiPartDeleteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiPartDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiPartGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PartResponse>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/Part`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PartResponseFromJSON));
    }

    /**
     */
    async apiPartGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PartResponse>> {
        const response = await this.apiPartGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiPartPostRaw(requestParameters: ApiPartPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PartResponse>> {
        if (requestParameters['postPartRequest'] == null) {
            throw new runtime.RequiredError(
                'postPartRequest',
                'Required parameter "postPartRequest" was null or undefined when calling apiPartPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/Part`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostPartRequestToJSON(requestParameters['postPartRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PartResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiPartPost(requestParameters: ApiPartPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PartResponse> {
        const response = await this.apiPartPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiPartPutRaw(requestParameters: ApiPartPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['putPartRequest'] == null) {
            throw new runtime.RequiredError(
                'putPartRequest',
                'Required parameter "putPartRequest" was null or undefined when calling apiPartPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/Part`;

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutPartRequestToJSON(requestParameters['putPartRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiPartPut(requestParameters: ApiPartPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiPartPutRaw(requestParameters, initOverrides);
    }

}
