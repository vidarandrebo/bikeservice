/* tslint:disable */
/* eslint-disable */
/**
 * BikeService.Server | v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  EquipmentTypeResponse,
  PostEquipmentTypeRequest,
} from '../models/index';
import {
    EquipmentTypeResponseFromJSON,
    EquipmentTypeResponseToJSON,
    PostEquipmentTypeRequestFromJSON,
    PostEquipmentTypeRequestToJSON,
} from '../models/index';

export interface ApiTypeDeleteRequest {
    id?: string;
}

export interface ApiTypePostRequest {
    postEquipmentTypeRequest: PostEquipmentTypeRequest;
}

/**
 * TypeApi - interface
 * 
 * @export
 * @interface TypeApiInterface
 */
export interface TypeApiInterface {
    /**
     * 
     * @param {string} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TypeApiInterface
     */
    apiTypeDeleteRaw(requestParameters: ApiTypeDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    apiTypeDelete(requestParameters: ApiTypeDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TypeApiInterface
     */
    apiTypeGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<EquipmentTypeResponse>>>;

    /**
     */
    apiTypeGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<EquipmentTypeResponse>>;

    /**
     * 
     * @param {PostEquipmentTypeRequest} postEquipmentTypeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TypeApiInterface
     */
    apiTypePostRaw(requestParameters: ApiTypePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    apiTypePost(requestParameters: ApiTypePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class TypeApi extends runtime.BaseAPI implements TypeApiInterface {

    /**
     */
    async apiTypeDeleteRaw(requestParameters: ApiTypeDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/Type`;

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiTypeDelete(requestParameters: ApiTypeDeleteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiTypeDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiTypeGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<EquipmentTypeResponse>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/Type`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EquipmentTypeResponseFromJSON));
    }

    /**
     */
    async apiTypeGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<EquipmentTypeResponse>> {
        const response = await this.apiTypeGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiTypePostRaw(requestParameters: ApiTypePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['postEquipmentTypeRequest'] == null) {
            throw new runtime.RequiredError(
                'postEquipmentTypeRequest',
                'Required parameter "postEquipmentTypeRequest" was null or undefined when calling apiTypePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/Type`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostEquipmentTypeRequestToJSON(requestParameters['postEquipmentTypeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiTypePost(requestParameters: ApiTypePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiTypePostRaw(requestParameters, initOverrides);
    }

}
